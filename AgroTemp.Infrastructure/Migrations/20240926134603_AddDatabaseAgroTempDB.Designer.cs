// <auto-generated />
using System;
using AgroTemp.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgroTemp.Infrastructure.Migrations
{
    [DbContext(typeof(AgroTempDbContext))]
    [Migration("20240926134603_AddDatabaseAgroTempDB")]
    partial class AddDatabaseAgroTempDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_polish_ci")
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("AgroTemp.Domain.Entities.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Alarms", (string)null);
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.Probe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("NrFirstSensor")
                        .HasColumnType("int");

                    b.Property<int>("ReadingModuleId")
                        .HasColumnType("int");

                    b.Property<int>("SensorsCount")
                        .HasColumnType("int");

                    b.Property<int>("SiloId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ReadingModuleId");

                    b.HasIndex("SiloId");

                    b.ToTable("Probes", (string)null);
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.ReadingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Baudrate")
                        .HasColumnType("int");

                    b.Property<int>("BitsOfSign")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Port_or_AddressIP")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("StopBit")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleID")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReadingModules", (string)null);
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.Silo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("OrderSensors")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Silos", (string)null);
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.Temperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("ReadingModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<short?>("sensor1")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor10")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor100")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor11")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor12")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor13")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor14")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor15")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor16")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor17")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor18")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor19")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor2")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor20")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor21")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor22")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor23")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor24")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor25")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor26")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor27")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor28")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor29")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor3")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor30")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor31")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor32")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor33")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor34")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor35")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor36")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor37")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor38")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor39")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor4")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor40")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor41")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor42")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor43")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor44")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor45")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor46")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor47")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor48")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor49")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor5")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor50")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor51")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor52")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor53")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor54")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor55")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor56")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor57")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor58")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor59")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor6")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor60")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor61")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor62")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor63")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor64")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor65")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor66")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor67")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor68")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor69")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor7")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor70")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor71")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor72")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor73")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor74")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor75")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor76")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor77")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor78")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor79")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor8")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor80")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor81")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor82")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor83")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor84")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor85")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor86")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor87")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor88")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor89")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor9")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor90")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor91")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor92")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor93")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor94")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor95")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor96")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor97")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor98")
                        .HasColumnType("smallint");

                    b.Property<short?>("sensor99")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReadingModuleId");

                    b.ToTable("Temperatures", (string)null);
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeOfUser")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.Probe", b =>
                {
                    b.HasOne("AgroTemp.Domain.Entities.ReadingModule", "ReadingModule")
                        .WithMany("Probes")
                        .HasForeignKey("ReadingModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroTemp.Domain.Entities.Silo", "Silo")
                        .WithMany("Probes")
                        .HasForeignKey("SiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReadingModule");

                    b.Navigation("Silo");
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.Temperature", b =>
                {
                    b.HasOne("AgroTemp.Domain.Entities.ReadingModule", "ReadingModule")
                        .WithMany("Temperatures")
                        .HasForeignKey("ReadingModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReadingModule");
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.ReadingModule", b =>
                {
                    b.Navigation("Probes");

                    b.Navigation("Temperatures");
                });

            modelBuilder.Entity("AgroTemp.Domain.Entities.Silo", b =>
                {
                    b.Navigation("Probes");
                });
#pragma warning restore 612, 618
        }
    }
}
